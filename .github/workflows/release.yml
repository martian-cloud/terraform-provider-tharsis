# This GitHub action can publish assets for release when a tag is created.
# Currently its setup to run on any tag that matches the pattern "v*" (ie. v0.1.0).
#
# This uses an action (hashicorp/ghaction-import-gpg) that assumes you set your
# private key in the `GPG_PRIVATE_KEY` secret and passphrase in the `PASSPHRASE`
# secret. If you would rather own your own GPG handling, please fork this action
# or use an alternative one for key handling.
#
# You will need to pass the `--batch` flag to `gpg` in your signing step
# in `goreleaser` to indicate this is being used in a non-interactive mode.
#
name: release
on:
  push:
    tags:
      - "v*"
permissions:
  contents: write
jobs:
  create_sboms:
    name: Generate SBOMs
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # The platforms we'll be generating SBOMs for.
        os: [freebsd, windows, linux, darwin]
        arch: ["386", arm64, amd64, arm]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: "Install CycloneDX"
        uses: CycloneDX/gh-gomod-generate-sbom@v2
        with:
          version: v1
      - name: Generate SBOM
        env:
          GOOS: ${{ matrix.os }}
          GO_ARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        run: "bash ./scripts/create_sboms.sh"
        shell: bash
      - uses: actions/upload-artifact@master
        with:
          name: "gl-sbom-go-${{ matrix.os }}-${{ matrix.arch }}-0.cdx.json"
          path: "**/gl-sbom-go-*.cdx.json"
  merge_sboms:
    name: Merge SBOMs
    runs-on: ubuntu-latest
    needs: create_sboms
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download all SBOMs
        uses: actions/download-artifact@v4
      - run: "bash ./scripts/merge_sboms.sh"
        env:
          CGO_ENABLED: 0
          VERSION: ${{ github.ref }}
        shell: bash
      - uses: actions/upload-artifact@master
        with:
          path: gl-sbom-all.cdx.json
  goreleaser:
    runs-on: ubuntu-latest
    needs: merge_sboms
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Unshallow
        run: git fetch --prune --unshallow
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: "go.mod"
          cache: true
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      - name: Download SBOMs
        uses: actions/download-artifact@v4
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v3.1.0
        with:
          version: v1.26.2
          args: release --clean
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          # GitHub sets this automatically
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
